---
source: tests-integration/tests/lsp.rs
expression: report
---
Hover at Position { line: 2, character: 8 }

```
import Lib (life, Maybe(..), (+),  type (++))
--      $    $     $          $          $
```

```purescript
module Lib where
```


Hover at Position { line: 2, character: 13 }

```
import Lib (life, Maybe(..), (+),  type (++))
--      $    $     $          $          $
```

```purescript
life :: Int
```


Hover at Position { line: 2, character: 19 }

```
import Lib (life, Maybe(..), (+),  type (++))
--      $    $     $          $          $
```

<empty>


Hover at Position { line: 2, character: 30 }

```
import Lib (life, Maybe(..), (+),  type (++))
--      $    $     $          $          $
```

<empty>


Hover at Position { line: 2, character: 41 }

```
import Lib (life, Maybe(..), (+),  type (++))
--      $    $     $          $          $
```

<empty>


Hover at Position { line: 6, character: 7 }

```
ref = life
--     $
```

```purescript
life :: Int
```


Hover at Position { line: 9, character: 24 }

```
just :: forall a. a -> Maybe a
--                      $    $
```

<empty>


Hover at Position { line: 9, character: 29 }

```
just :: forall a. a -> Maybe a
--                      $    $
```

<empty>


Hover at Position { line: 11, character: 8 }

```
just = Just
--      $
```

```purescript
Just a
```


Hover at Position { line: 14, character: 22 }

```
nothing :: forall a. Maybe a
--                    $
```

<empty>


Hover at Position { line: 16, character: 11 }

```
nothing = Nothing
--         $
```

```purescript
Nothing
```


Hover at Position { line: 20, character: 10 }

```
opName = (+)
--        $
```

```purescript
infix 5 plus as +
```


Hover at Position { line: 24, character: 12 }

```
opChain = 9 + 10
--          $
```

```purescript
infix 5 plus as +
```


Hover at Position { line: 27, character: 23 }

```
type TypeOpChain = Int ++ Int
--                     $
```

```purescript
infix 5 type Cons as ++
```
