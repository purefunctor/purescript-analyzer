---
source: crates/analyzer-surface/src/lower/tests.rs
expression: "(surface, expressions, let_names, binders, types)"
---
(
    Module {
        header: ModuleHeader {
            name: ModuleName(
                "Main",
            ),
            export_list: None,
        },
        imports: ModuleImports {
            declarations: [],
        },
        body: ModuleBody {
            declarations: [
                ValueDeclaration(
                    ValueDeclaration {
                        id: Idx::<ValueGroup>(0),
                        name: Name(
                            "const",
                        ),
                        annotation: Some(
                            Idx::<Type>(4),
                        ),
                        equations: [
                            ValueEquation {
                                binders: [
                                    Idx::<Binder>(0),
                                    Idx::<Binder>(1),
                                ],
                                binding: Unconditional {
                                    where_expr: WhereExpr {
                                        expr_id: Idx::<Expr>(0),
                                        let_bindings: [],
                                    },
                                },
                            },
                        ],
                    },
                ),
                ValueDeclaration(
                    ValueDeclaration {
                        id: Idx::<ValueGroup>(1),
                        name: Name(
                            "basicGuards",
                        ),
                        annotation: None,
                        equations: [
                            ValueEquation {
                                binders: [],
                                binding: Guarded {
                                    guarded_exprs: [
                                        GuardedExpr {
                                            pattern_guards: [
                                                PatternGuard {
                                                    binder_id: None,
                                                    expr_id: Idx::<Expr>(1),
                                                },
                                            ],
                                            where_expr: WhereExpr {
                                                expr_id: Idx::<Expr>(2),
                                                let_bindings: [],
                                            },
                                        },
                                        GuardedExpr {
                                            pattern_guards: [
                                                PatternGuard {
                                                    binder_id: None,
                                                    expr_id: Idx::<Expr>(3),
                                                },
                                            ],
                                            where_expr: WhereExpr {
                                                expr_id: Idx::<Expr>(4),
                                                let_bindings: [],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                ),
                ValueDeclaration(
                    ValueDeclaration {
                        id: Idx::<ValueGroup>(2),
                        name: Name(
                            "bindGuard",
                        ),
                        annotation: None,
                        equations: [
                            ValueEquation {
                                binders: [],
                                binding: Guarded {
                                    guarded_exprs: [
                                        GuardedExpr {
                                            pattern_guards: [
                                                PatternGuard {
                                                    binder_id: Some(
                                                        Idx::<Binder>(2),
                                                    ),
                                                    expr_id: Idx::<Expr>(5),
                                                },
                                            ],
                                            where_expr: WhereExpr {
                                                expr_id: Idx::<Expr>(6),
                                                let_bindings: [],
                                            },
                                        },
                                        GuardedExpr {
                                            pattern_guards: [
                                                PatternGuard {
                                                    binder_id: Some(
                                                        Idx::<Binder>(3),
                                                    ),
                                                    expr_id: Idx::<Expr>(7),
                                                },
                                            ],
                                            where_expr: WhereExpr {
                                                expr_id: Idx::<Expr>(8),
                                                let_bindings: [],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                ),
                ValueDeclaration(
                    ValueDeclaration {
                        id: Idx::<ValueGroup>(3),
                        name: Name(
                            "mixedGuard",
                        ),
                        annotation: None,
                        equations: [
                            ValueEquation {
                                binders: [
                                    Idx::<Binder>(4),
                                ],
                                binding: Guarded {
                                    guarded_exprs: [
                                        GuardedExpr {
                                            pattern_guards: [
                                                PatternGuard {
                                                    binder_id: Some(
                                                        Idx::<Binder>(5),
                                                    ),
                                                    expr_id: Idx::<Expr>(9),
                                                },
                                                PatternGuard {
                                                    binder_id: None,
                                                    expr_id: Idx::<Expr>(10),
                                                },
                                            ],
                                            where_expr: WhereExpr {
                                                expr_id: Idx::<Expr>(12),
                                                let_bindings: [
                                                    Name {
                                                        id: Idx::<LetName>(0),
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                ),
            ],
            class_declarations: {},
            data_declarations: {},
            value_declarations: {
                Idx::<ValueGroup>(0): 0,
                Idx::<ValueGroup>(1): 1,
                Idx::<ValueGroup>(3): 3,
                Idx::<ValueGroup>(2): 2,
            },
        },
    },
    [
        Variable(
            Qualified {
                prefix: None,
                value: Name(
                    "a",
                ),
            },
        ),
        Literal(
            Int(
                1909,
            ),
        ),
        Literal(
            Char(
                "'m'",
            ),
        ),
        Literal(
            Number(
                "99.0",
            ),
        ),
        Literal(
            String(
                "\"a\"",
            ),
        ),
        Variable(
            Qualified {
                prefix: None,
                value: Name(
                    "b",
                ),
            },
        ),
        Literal(
            Int(
                0,
            ),
        ),
        Variable(
            Qualified {
                prefix: None,
                value: Name(
                    "d",
                ),
            },
        ),
        Literal(
            Int(
                1,
            ),
        ),
        Variable(
            Qualified {
                prefix: None,
                value: Name(
                    "a",
                ),
            },
        ),
        Variable(
            Qualified {
                prefix: None,
                value: Name(
                    "b",
                ),
            },
        ),
        Literal(
            Int(
                0,
            ),
        ),
        Literal(
            Record(
                [
                    RecordPun(
                        Name(
                            "a",
                        ),
                    ),
                    RecordPun(
                        Name(
                            "b",
                        ),
                    ),
                    RecordPun(
                        Name(
                            "c",
                        ),
                    ),
                ],
            ),
        ),
    ],
    [
        LetName {
            name: Name(
                "c",
            ),
            annotation: None,
            equations: [
                LetNameEquation {
                    binders: [],
                    binding: Unconditional {
                        where_expr: WhereExpr {
                            expr_id: Idx::<Expr>(11),
                            let_bindings: [],
                        },
                    },
                },
            ],
        },
    ],
    [
        Variable(
            Name(
                "a",
            ),
        ),
        Variable(
            Name(
                "b",
            ),
        ),
        Variable(
            Name(
                "a",
            ),
        ),
        Variable(
            Name(
                "c",
            ),
        ),
        Variable(
            Name(
                "a",
            ),
        ),
        Variable(
            Name(
                "b",
            ),
        ),
    ],
    [
        Variable(
            Name(
                "a",
            ),
        ),
        Variable(
            Name(
                "b",
            ),
        ),
        Variable(
            Name(
                "a",
            ),
        ),
        Arrow(
            [
                Idx::<Type>(0),
                Idx::<Type>(1),
            ],
            Idx::<Type>(2),
        ),
        Forall(
            [
                Name(
                    Name(
                        "a",
                    ),
                ),
                Name(
                    Name(
                        "b",
                    ),
                ),
            ],
            Idx::<Type>(3),
        ),
    ],
)
