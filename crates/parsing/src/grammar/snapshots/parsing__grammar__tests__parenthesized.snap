---
source: crates/parsing/src/grammar/tests.rs
expression: result
---
Input: (1 + 2) * (3 * 4) / ((f x))

Start { kind: ExpressionOperatorChain }
  Start { kind: ParenthesizedExpression }
    Token { kind: LeftParenthesis }
    Start { kind: ExpressionOperatorChain }
      Start { kind: LiteralExpression }
        Token { kind: LiteralInteger }
      Finish
      Start { kind: OperatorPair }
        Start { kind: SymbolOperator }
          Start { kind: QualifiedName }
            Start { kind: NameRef }
              Token { kind: Operator }
            Finish
          Finish
        Finish
        Start { kind: LiteralExpression }
          Token { kind: LiteralInteger }
        Finish
      Finish
    Finish
    Token { kind: RightParenthesis }
  Finish
  Start { kind: OperatorPair }
    Start { kind: SymbolOperator }
      Start { kind: QualifiedName }
        Start { kind: NameRef }
          Token { kind: Operator }
        Finish
      Finish
    Finish
    Start { kind: ParenthesizedExpression }
      Token { kind: LeftParenthesis }
      Start { kind: ExpressionOperatorChain }
        Start { kind: LiteralExpression }
          Token { kind: LiteralInteger }
        Finish
        Start { kind: OperatorPair }
          Start { kind: SymbolOperator }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Operator }
              Finish
            Finish
          Finish
          Start { kind: LiteralExpression }
            Token { kind: LiteralInteger }
          Finish
        Finish
      Finish
      Token { kind: RightParenthesis }
    Finish
  Finish
  Start { kind: OperatorPair }
    Start { kind: SymbolOperator }
      Start { kind: QualifiedName }
        Start { kind: NameRef }
          Token { kind: Operator }
        Finish
      Finish
    Finish
    Start { kind: ParenthesizedExpression }
      Token { kind: LeftParenthesis }
      Start { kind: ParenthesizedExpression }
        Token { kind: LeftParenthesis }
        Start { kind: ApplicationExpression }
          Start { kind: VariableExpression }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Lower }
              Finish
            Finish
          Finish
          Start { kind: ArgumentList }
            Start { kind: TermArgument }
              Start { kind: VariableExpression }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Lower }
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
        Token { kind: RightParenthesis }
      Finish
      Token { kind: RightParenthesis }
    Finish
  Finish
Finish
