---
source: crates/parsing/src/grammar/tests.rs
expression: result
---
Input: module A where

type A (a :: A) (a :: A) (a :: A) = A

Start { kind: Module }
  Start { kind: ModuleHeader }
    Token { kind: ModuleKw }
    Start { kind: ModuleName }
      Start { kind: Name }
        Token { kind: Upper }
      Finish
    Finish
    Token { kind: WhereKw }
  Finish
  Token { kind: LayoutStart }
  Start { kind: ModuleImports }
  Finish
  Start { kind: ModuleBody }
    Start { kind: TypeDeclaration }
      Token { kind: TypeKw }
      Start { kind: Name }
        Token { kind: Upper }
      Finish
      Start { kind: SynonymVariables }
        Start { kind: TypeVariableKinded }
          Token { kind: LeftParenthesis }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Token { kind: Colon2 }
          Start { kind: ConstructorType }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Upper }
              Finish
            Finish
          Finish
          Token { kind: RightParenthesis }
        Finish
        Start { kind: TypeVariableKinded }
          Token { kind: LeftParenthesis }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Token { kind: Colon2 }
          Start { kind: ConstructorType }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Upper }
              Finish
            Finish
          Finish
          Token { kind: RightParenthesis }
        Finish
        Start { kind: TypeVariableKinded }
          Token { kind: LeftParenthesis }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Token { kind: Colon2 }
          Start { kind: ConstructorType }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Upper }
              Finish
            Finish
          Finish
          Token { kind: RightParenthesis }
        Finish
      Finish
      Token { kind: Equal }
      Start { kind: ConstructorType }
        Start { kind: QualifiedName }
          Start { kind: NameRef }
            Token { kind: Upper }
          Finish
        Finish
      Finish
    Finish
  Finish
  Token { kind: LayoutEnd }
Finish
