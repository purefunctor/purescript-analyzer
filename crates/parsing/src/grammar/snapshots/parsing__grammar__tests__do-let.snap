---
source: crates/parsing/src/grammar/tests.rs
expression: result
---
Input: do
  let
    a :: Int
    a = 0

    b x = x

    c | true = x

    d | Just e <- f 
      , g = h

Start { kind: DoExpression }
  Start { kind: QualifiedDo }
    Token { kind: DoKw }
  Finish
  Token { kind: LayoutStart }
  Start { kind: LayoutList }
    Start { kind: DoLetBinding }
      Token { kind: LetKw }
      Token { kind: LayoutStart }
      Start { kind: LayoutList }
        Start { kind: LetBindingSignature }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Token { kind: Colon2 }
          Start { kind: ConstructorType }
            Start { kind: QualifiedName }
              Start { kind: NameRef }
                Token { kind: Upper }
              Finish
            Finish
          Finish
        Finish
        Token { kind: LayoutSep }
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: BinderList }
          Finish
          Start { kind: UnconditionalBinding }
            Token { kind: Equal }
            Start { kind: WhereExpression }
              Start { kind: LiteralExpression }
                Token { kind: LiteralInteger }
              Finish
            Finish
          Finish
        Finish
        Token { kind: LayoutSep }
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: BinderList }
            Start { kind: VariableBinder }
              Start { kind: Name }
                Token { kind: Lower }
              Finish
            Finish
          Finish
          Start { kind: UnconditionalBinding }
            Token { kind: Equal }
            Start { kind: WhereExpression }
              Start { kind: VariableExpression }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Lower }
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
        Token { kind: LayoutSep }
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: BinderList }
          Finish
          Start { kind: GuardedBinding }
            Start { kind: GuardedExpression }
              Token { kind: Pipe }
              Start { kind: PatternGuardList }
                Start { kind: PatternGuard }
                  Start { kind: LiteralExpression }
                    Token { kind: LiteralTrue }
                  Finish
                Finish
              Finish
              Token { kind: Equal }
              Start { kind: WhereExpression }
                Start { kind: VariableExpression }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Lower }
                    Finish
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
        Token { kind: LayoutSep }
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: BinderList }
          Finish
          Start { kind: GuardedBinding }
            Start { kind: GuardedExpression }
              Token { kind: Pipe }
              Start { kind: PatternGuardList }
                Start { kind: PatternGuard }
                  Start { kind: ConstructorBinder }
                    Start { kind: QualifiedName }
                      Start { kind: NameRef }
                        Token { kind: Upper }
                      Finish
                    Finish
                    Start { kind: ArgumentList }
                      Start { kind: VariableBinder }
                        Start { kind: Name }
                          Token { kind: Lower }
                        Finish
                      Finish
                    Finish
                  Finish
                  Token { kind: LeftArrow }
                  Start { kind: VariableExpression }
                    Start { kind: QualifiedName }
                      Start { kind: NameRef }
                        Token { kind: Lower }
                      Finish
                    Finish
                  Finish
                Finish
                Token { kind: Comma }
                Start { kind: PatternGuard }
                  Start { kind: VariableExpression }
                    Start { kind: QualifiedName }
                      Start { kind: NameRef }
                        Token { kind: Lower }
                      Finish
                    Finish
                  Finish
                Finish
              Finish
              Token { kind: Equal }
              Start { kind: WhereExpression }
                Start { kind: VariableExpression }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Lower }
                    Finish
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
      Finish
      Token { kind: LayoutEnd }
    Finish
  Finish
  Token { kind: LayoutEnd }
Finish
