---
source: crates/parsing/src/grammar/tests.rs
expression: result
---
Input: module Main (value, Type, module Module.Name, class TypeClass, type (+), (-)) where

Start { kind: Module }
  Start { kind: ModuleHeader }
    Token { kind: ModuleKw }
    Start { kind: ModuleName }
      Start { kind: Name }
        Token { kind: Upper }
      Finish
    Finish
    Start { kind: ExportList }
      Token { kind: LeftParenthesis }
      Start { kind: ExportValue }
        Start { kind: NameRef }
          Token { kind: Lower }
        Finish
      Finish
      Token { kind: Comma }
      Start { kind: ExportType }
        Start { kind: NameRef }
          Token { kind: Upper }
        Finish
      Finish
      Token { kind: Comma }
      Start { kind: ExportModule }
        Token { kind: ModuleKw }
        Start { kind: ModuleName }
          Start { kind: Name }
            Token { kind: Upper }
          Finish
          Token { kind: Period }
          Start { kind: Name }
            Token { kind: Upper }
          Finish
        Finish
      Finish
      Token { kind: Comma }
      Start { kind: ExportClass }
        Token { kind: ClassKw }
        Start { kind: NameRef }
          Token { kind: Upper }
        Finish
      Finish
      Token { kind: Comma }
      Start { kind: ExportTypeOp }
        Token { kind: TypeKw }
        Start { kind: Wrapped }
          Token { kind: LeftParenthesis }
          Start { kind: NameRef }
            Token { kind: Operator }
          Finish
          Token { kind: RightParenthesis }
        Finish
      Finish
      Token { kind: Comma }
      Start { kind: ExportOp }
        Start { kind: Wrapped }
          Token { kind: LeftParenthesis }
          Start { kind: NameRef }
            Token { kind: Operator }
          Finish
          Token { kind: RightParenthesis }
        Finish
      Finish
      Token { kind: RightParenthesis }
    Finish
    Token { kind: WhereKw }
  Finish
  Token { kind: LayoutStart }
  Start { kind: ModuleImports }
  Finish
  Start { kind: ModuleBody }
  Finish
  Token { kind: LayoutEnd }
Finish
