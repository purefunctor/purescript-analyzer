---
source: crates/parsing/tests/grammar_tests.rs
expression: result
input_file: crates/parsing/tests/inputs/passing/expression/do-let.input
---
Input: do
  let
    a :: Int
    a = 0

    b x = x

    c | true = x

    d | Just e <- f 
      , g = h

Start { kind: DoExpression }
  Start { kind: QualifiedDo }
    Token { kind: DoKw }
  Finish
  Start { kind: OneOrMore }
    Start { kind: DoLetBinding }
      Token { kind: LetKw }
      Start { kind: OneOrMore }
        Start { kind: LetBindingSignature }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Token { kind: Colon2 }
          Start { kind: ConstructorType }
            Token { kind: Upper }
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
          Finish
          Start { kind: Unconditional }
            Token { kind: Equal }
            Start { kind: WhereExpression }
              Start { kind: LiteralExpression }
                Token { kind: LiteralInteger }
              Finish
            Finish
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
            Start { kind: VariableBinder }
              Start { kind: Name }
                Token { kind: Lower }
              Finish
            Finish
          Finish
          Start { kind: Unconditional }
            Token { kind: Equal }
            Start { kind: WhereExpression }
              Start { kind: VariableExpression }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Lower }
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
          Finish
          Start { kind: Guarded }
            Token { kind: Pipe }
            Start { kind: Separated }
              Start { kind: PatternGuard }
                Start { kind: LiteralExpression }
                  Token { kind: LiteralTrue }
                Finish
              Finish
            Finish
            Token { kind: Equal }
            Start { kind: WhereExpression }
              Start { kind: VariableExpression }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Lower }
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
        Start { kind: LetBindingName }
          Start { kind: Name }
            Token { kind: Lower }
          Finish
          Start { kind: ZeroOrMore }
          Finish
          Start { kind: Guarded }
            Token { kind: Pipe }
            Start { kind: Separated }
              Start { kind: PatternGuard }
                Start { kind: ConstructorBinder }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Upper }
                    Finish
                  Finish
                  Start { kind: OneOrMore }
                    Start { kind: VariableBinder }
                      Start { kind: Name }
                        Token { kind: Lower }
                      Finish
                    Finish
                  Finish
                Finish
                Token { kind: LeftArrow }
                Start { kind: VariableExpression }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Lower }
                    Finish
                  Finish
                Finish
              Finish
              Token { kind: Comma }
              Start { kind: PatternGuard }
                Start { kind: VariableExpression }
                  Start { kind: QualifiedName }
                    Start { kind: NameRef }
                      Token { kind: Lower }
                    Finish
                  Finish
                Finish
              Finish
            Finish
            Token { kind: Equal }
            Start { kind: WhereExpression }
              Start { kind: VariableExpression }
                Start { kind: QualifiedName }
                  Start { kind: NameRef }
                    Token { kind: Lower }
                  Finish
                Finish
              Finish
            Finish
          Finish
        Finish
      Finish
    Finish
  Finish
Finish

